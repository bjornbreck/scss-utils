/// Simply Rem Calculations
/// @example
/// font-size: rem-calc(22); OR font-size: rem-calc(22px); OR padding: rem-calc(30 15 30 15);
$global-font-size: 100% !default;

// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
// @param {Number} $num - Number to strip unit from.
// @returns {Number} The same number, sans unit.
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// Converts one or more pixel values into matching rem values.
// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.
// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$base-font-size` variable as the base.
// @returns {List} A list of converted values.
@function rem-calc($values, $base: null) {
  $rem-values: ();
  $count: length($values);
  // If no base is defined, defer to the global font size
  @if $base == null {
    $base: $global-font-size;
  }
  // If the base font size is a %, then multiply it by 16px
  // This is because 100% font size = 16px in most all browsers
  @if unit($base) == '%' {
    $base: ($base / 100%) * 16px;
  }
  // Using rem as base allows correct scaling
  @if unit($base) == 'rem' {
    $base: strip-unit($base) * 16px;
  }
  @if $count == 1 {
    @return -to-rem($values, $base);
  }
  @for $i from 1 through $count {
    $rem-values: append($rem-values, -to-rem(nth($values, $i), $base));
  }
  @return $rem-values;
}

// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.
// @access private
// @param {Number} $value - Pixel value to convert.
// @param {Number} $base [null] - Base for pixel conversion.
// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.
@function -to-rem($value, $base: null) {
  // Check if the value is a number
  @if type-of($value) != 'number' {
    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
    @return $value;
  }
  // Transform em into rem if someone hands over 'em's
  @if unit($value) == 'em' {
    $value: strip-unit($value) * 1rem;
  }
  // Calculate rem if units for $value is not rem or em
  @if unit($value) != 'rem' {
    $value: strip-unit($value) / strip-unit($base) * 1rem;
  }
  // Turn 0rem into 0
  @if $value == 0rem {
    $value: 0;
  }
  @return $value;
}

// Screen size variables
$screen-xs-min: 480px!default;
$screen-sm-min: 736px!default;
$screen-md-min: 980px!default;
$screen-lg-min: 1280px!default;
$screen-xl-min: 1690px!default;

// Mixins
@mixin xs {
  @media (min-width: #{$screen-xs-min}) {@content;}
}

@mixin sm {
  @media (min-width: #{$screen-sm-min}) {@content;}
}

@mixin md {
  @media (min-width: #{$screen-md-min}) {@content;}
}

@mixin lg {
  @media (min-width: #{$screen-lg-min}) {@content;}
}

@mixin xl {
  @media (min-width: #{$screen-xl-min}) {@content;}
}

/// Apply a background color that extends past it's wrapper.
/// @example
///   @include full-width-bg-color(green, before)
@mixin full-width-bg-color($color, $psuedo-element: before, $addRelative: true, $z-index: null) {
  @if ($addRelative) {
    position: relative;
  }

  @if ($z-index) {
    z-index: $z-index;
  }

  &:#{$psuedo-element} {
    content: '';
    position: absolute;
    width: 100vw;
    top: 0;
    left: 0;
    height: 100%;
    background: $color;
    margin: 0 calc(50% - 50vw);
    z-index: -1;
  }
}

/// Required for message styles
@mixin square($dimensions) {
  height: $dimensions;
  width: $dimensions;
}

/// Required for message styles
@mixin circle($dimensions) {
  height: $dimensions;
  width: $dimensions;
  border-radius: 50%;
}

$gradients: (
  _base: (
    type: linear,
    position: "to right",
    stops: (
      #000 "0%",
      #fff "100%"
    )
  )
) !default;

/// Gradients - Helpful mixin when many gradients are used on a site so you can call them by name.
/// @param {String} $gradient-key - key in $gradients map to determine styles from config
/// @param {String} $type [linear] - valid gradient type (linear/radial)
/// @param {String} $position ["to right"] - the directional keyword for the gradient
/// @param {Boolean} $legacy-support [false] - include background color where gradients aren't supported
/// @example
///   @include gradient(gray, linear, "to right")
@mixin gradient($gradient-key, $type: linear, $position: "to right") {
  $gradient: extend-in-map($gradients, $gradient-key);
  $stops: map-get($gradient, stops);

  @if $type != linear and $type != radial {
    @warn "`#{$type} is not a valid gradient type. The parameter must be linear or radial.";
  }

  @if $type == linear {
    background-image: linear-gradient(unquote($position), #{$stops});
  } @elseif $type == radial {
    background-image: radial-gradient(unquote($position), #{$stops});
  }
}

/// Fluid typography
/// @example
/// @include fluid-type($min_width, $max_width, $min_font, $max_font);
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

/// Responsive Ratio
/// @example
/// @include responsive-ratio(16,9);
@mixin responsive-ratio($x,$y, $pseudo: false) {
  $padding: unquote( ( $y / $x ) * 100 + '%' );
  @if $pseudo {
    &:before {
      @include pseudo($pos: relative);
      width: 100%;
      padding-top: $padding;
    }
  } @else {
    padding-top: $padding;
  }
}